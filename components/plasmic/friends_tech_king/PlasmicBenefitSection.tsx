// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: wTnQKvx7xtRe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: X48cJgHH48y/component

import { useScreenVariants as useScreenVariantswjymDpmg8BQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WJYMDpmg8bQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicBenefitSection.module.css"; // plasmic-import: wTnQKvx7xtRe/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: e58rgm-WFTW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iECEl4Bsrc_/icon

createPlasmicElementProxy;

export type PlasmicBenefitSection__VariantMembers = {
  alternate: "alternate";
  reversed: "reversed";
};
export type PlasmicBenefitSection__VariantsArgs = {
  alternate?: SingleBooleanChoiceArg<"alternate">;
  reversed?: SingleBooleanChoiceArg<"reversed">;
};
type VariantPropType = keyof PlasmicBenefitSection__VariantsArgs;
export const PlasmicBenefitSection__VariantProps = new Array<VariantPropType>(
  "alternate",
  "reversed"
);

export type PlasmicBenefitSection__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBenefitSection__ArgsType;
export const PlasmicBenefitSection__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicBenefitSection__OverridesType = {
  frame11?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  image?: p.Flex<"div">;
};

export interface DefaultBenefitSectionProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  alternate?: SingleBooleanChoiceArg<"alternate">;
  reversed?: SingleBooleanChoiceArg<"reversed">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBenefitSection__RenderFunc(props: {
  variants: PlasmicBenefitSection__VariantsArgs;
  args: PlasmicBenefitSection__ArgsType;
  overrides: PlasmicBenefitSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "alternate",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.alternate
      },
      {
        path: "reversed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reversed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswjymDpmg8BQ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"frame11"}
      data-plasmic-override={overrides.frame11}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.frame11,
        {
          [sty.frame11alternate]: hasVariant($state, "alternate", "alternate"),
          [sty.frame11reversed]: hasVariant($state, "reversed", "reversed")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame7"}
        data-plasmic-override={overrides.frame7}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame7)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Whitelist Membership Benefits",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Become a Friend Tech Whitelist Member to enjoy premium benefits, including early access to new features, priority support, and exclusive rewards.",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__cInYc)}
              color={"blue"}
            >
              {"Get Whitelisted"}
            </Button>
          ),
          value: args.slot2
        })}
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"image"}
        data-plasmic-override={overrides.image}
        hasGap={true}
        className={classNames(projectcss.all, sty.image)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__pTx3T)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/friends_tech_king/images/whitelistpng.png",
                fullWidth: 576,
                fullHeight: 1152,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.slot3
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame11: ["frame11", "frame7", "freeBox", "image"],
  frame7: ["frame7", "freeBox"],
  freeBox: ["freeBox"],
  image: ["image"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  frame11: "div";
  frame7: "div";
  freeBox: "div";
  image: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBenefitSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBenefitSection__VariantsArgs;
    args?: PlasmicBenefitSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBenefitSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBenefitSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBenefitSection__ArgProps,
          internalVariantPropNames: PlasmicBenefitSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBenefitSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame11") {
    func.displayName = "PlasmicBenefitSection";
  } else {
    func.displayName = `PlasmicBenefitSection.${nodeName}`;
  }
  return func;
}

export const PlasmicBenefitSection = Object.assign(
  // Top-level PlasmicBenefitSection renders the root element
  makeNodeComponent("frame11"),
  {
    // Helper components rendering sub-elements
    frame7: makeNodeComponent("frame7"),
    freeBox: makeNodeComponent("freeBox"),
    image: makeNodeComponent("image"),

    // Metadata about props expected for PlasmicBenefitSection
    internalVariantProps: PlasmicBenefitSection__VariantProps,
    internalArgProps: PlasmicBenefitSection__ArgProps
  }
);

export default PlasmicBenefitSection;
/* prettier-ignore-end */
