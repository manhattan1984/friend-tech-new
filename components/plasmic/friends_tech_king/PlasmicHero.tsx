// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: 2S-DfRS0Ri3G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: X48cJgHH48y/component
import ConnectWallet from "../../ConnectWallet"; // plasmic-import: 1GlNaZ2SY0FO/component

import { useScreenVariants as useScreenVariantswjymDpmg8BQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WJYMDpmg8bQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicHero.module.css"; // plasmic-import: 2S-DfRS0Ri3G/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: e58rgm-WFTW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iECEl4Bsrc_/icon

createPlasmicElementProxy;

export type PlasmicHero__VariantMembers = {};
export type PlasmicHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHero__VariantsArgs;
export const PlasmicHero__VariantProps = new Array<VariantPropType>();

export type PlasmicHero__ArgsType = {
  heroHeading2?: React.ReactNode;
  children?: React.ReactNode;
  ctaButtons2?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHero__ArgsType;
export const PlasmicHero__ArgProps = new Array<ArgPropType>(
  "heroHeading2",
  "children",
  "ctaButtons2",
  "slot"
);

export type PlasmicHero__OverridesType = {
  hero?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  heroText?: p.Flex<"div">;
  heroHeading?: p.Flex<"div">;
  ctaButtons?: p.Flex<"div">;
  heroImage?: p.Flex<"div">;
  connectWallet?: p.Flex<typeof ConnectWallet>;
};

export interface DefaultHeroProps {
  heroHeading2?: React.ReactNode;
  children?: React.ReactNode;
  ctaButtons2?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHero__RenderFunc(props: {
  variants: PlasmicHero__VariantsArgs;
  args: PlasmicHero__ArgsType;
  overrides: PlasmicHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "connectWallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswjymDpmg8BQ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"hero"}
      data-plasmic-override={overrides.hero}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.hero
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame6"}
        data-plasmic-override={overrides.frame6}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame6)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"heroText"}
          data-plasmic-override={overrides.heroText}
          hasGap={true}
          className={classNames(projectcss.all, sty.heroText)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"heroHeading"}
            data-plasmic-override={overrides.heroHeading}
            hasGap={true}
            className={classNames(projectcss.all, sty.heroHeading)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qWlEd
                    )}
                  >
                    {"Welcome to Friend.Tech"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__idh3O
                    )}
                  >
                    {"Where Innovation Meets Finance."}
                  </div>
                </React.Fragment>
              ),
              value: args.heroHeading2
            })}
          </p.Stack>
          {p.renderPlasmicSlot({
            defaultContents:
              "Unlock the Future of Finance and Technology with Friend Tech.",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
          <p.Stack
            as={"div"}
            data-plasmic-name={"ctaButtons"}
            data-plasmic-override={overrides.ctaButtons}
            hasGap={true}
            className={classNames(projectcss.all, sty.ctaButtons)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button___8DX51)}
                    color={"blue" as const}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateConnectWallet"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "pQm3XhnM9_58",
                                  componentUuid: "2S-DfRS0Ri3G",
                                  argName: "variable"
                                },
                                () => ({
                                  objRoot: $state,
                                  variablePath: ["connectWallet"]
                                })
                              ),
                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "pQm3XhnM9_58",
                                  componentUuid: "2S-DfRS0Ri3G",
                                  argName: "operation"
                                },
                                () => 4
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "pQm3XhnM9_58",
                                componentUuid: "2S-DfRS0Ri3G"
                              },
                              () =>
                                (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = p.get(objRoot, variablePath);
                                  p.set(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateConnectWallet"] === "object" &&
                        typeof $steps["updateConnectWallet"].then === "function"
                      ) {
                        $steps["updateConnectWallet"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "pQm3XhnM9_58",
                            componentUuid: "2S-DfRS0Ri3G"
                          },
                          $steps["updateConnectWallet"]
                        );
                      }
                    }}
                  >
                    {"Get Started"}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__jKqt)}
                    ghost={true}
                  >
                    {"Learn More"}
                  </Button>
                </React.Fragment>
              ),
              value: args.ctaButtons2
            })}
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"heroImage"}
          data-plasmic-override={overrides.heroImage}
          hasGap={true}
          className={classNames(projectcss.all, sty.heroImage)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__zJAsM)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/friends_tech_king/images/homeHeropng.png",
                  fullWidth: 577,
                  fullHeight: 1152,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.slot
          })}
        </p.Stack>
      </p.Stack>
      <ConnectWallet
        data-plasmic-name={"connectWallet"}
        data-plasmic-override={overrides.connectWallet}
        className={classNames("__wab_instance", sty.connectWallet)}
        connectWallet={(() => {
          try {
            return $state.connectWallet;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hero: [
    "hero",
    "frame6",
    "heroText",
    "heroHeading",
    "ctaButtons",
    "heroImage",
    "connectWallet"
  ],
  frame6: ["frame6", "heroText", "heroHeading", "ctaButtons", "heroImage"],
  heroText: ["heroText", "heroHeading", "ctaButtons"],
  heroHeading: ["heroHeading"],
  ctaButtons: ["ctaButtons"],
  heroImage: ["heroImage"],
  connectWallet: ["connectWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  hero: "div";
  frame6: "div";
  heroText: "div";
  heroHeading: "div";
  ctaButtons: "div";
  heroImage: "div";
  connectWallet: typeof ConnectWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHero__VariantsArgs;
    args?: PlasmicHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHero__ArgProps,
          internalVariantPropNames: PlasmicHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hero") {
    func.displayName = "PlasmicHero";
  } else {
    func.displayName = `PlasmicHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHero = Object.assign(
  // Top-level PlasmicHero renders the root element
  makeNodeComponent("hero"),
  {
    // Helper components rendering sub-elements
    frame6: makeNodeComponent("frame6"),
    heroText: makeNodeComponent("heroText"),
    heroHeading: makeNodeComponent("heroHeading"),
    ctaButtons: makeNodeComponent("ctaButtons"),
    heroImage: makeNodeComponent("heroImage"),
    connectWallet: makeNodeComponent("connectWallet"),

    // Metadata about props expected for PlasmicHero
    internalVariantProps: PlasmicHero__VariantProps,
    internalArgProps: PlasmicHero__ArgProps
  }
);

export default PlasmicHero;
/* prettier-ignore-end */
