// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: sZ3gbPrkMb8I

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageSection from "../../PageSection"; // plasmic-import: AICSkwUkXJt3/component
import Hero from "../../Hero"; // plasmic-import: 2S-DfRS0Ri3G/component
import ConnectButton from "../../ConnectButton"; // plasmic-import: 0oyO6LjGlHzw/component
import Button from "../../Button"; // plasmic-import: X48cJgHH48y/component
import BenefitSection from "../../BenefitSection"; // plasmic-import: wTnQKvx7xtRe/component
import ConnectWallet from "../../ConnectWallet"; // plasmic-import: 1GlNaZ2SY0FO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicAirdrop.module.css"; // plasmic-import: sZ3gbPrkMb8I/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: e58rgm-WFTW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iECEl4Bsrc_/icon

createPlasmicElementProxy;

export type PlasmicAirdrop__VariantMembers = {};
export type PlasmicAirdrop__VariantsArgs = {};
type VariantPropType = keyof PlasmicAirdrop__VariantsArgs;
export const PlasmicAirdrop__VariantProps = new Array<VariantPropType>();

export type PlasmicAirdrop__ArgsType = {};
type ArgPropType = keyof PlasmicAirdrop__ArgsType;
export const PlasmicAirdrop__ArgProps = new Array<ArgPropType>();

export type PlasmicAirdrop__OverridesType = {
  root?: p.Flex<"div">;
  pageSection?: p.Flex<typeof PageSection>;
  hero?: p.Flex<typeof Hero>;
  text?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  benefitSection?: p.Flex<typeof BenefitSection>;
  connectWallet?: p.Flex<typeof ConnectWallet>;
};

export interface DefaultAirdropProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAirdrop__RenderFunc(props: {
  variants: PlasmicAirdrop__VariantsArgs;
  args: PlasmicAirdrop__ArgsType;
  overrides: PlasmicAirdrop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "connectWallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageSection
            data-plasmic-name={"pageSection"}
            data-plasmic-override={overrides.pageSection}
            className={classNames("__wab_instance", sty.pageSection)}
            slot={
              <Hero
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                className={classNames("__wab_instance", sty.hero)}
                ctaButtons2={
                  <React.Fragment>
                    <ConnectButton
                      className={classNames(
                        "__wab_instance",
                        sty.connectButton__eYm4Y
                      )}
                    >
                      {"Claim Your Airdrop"}
                    </ConnectButton>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      ghost={true}
                      link={"/airdrop/#airdrop"}
                    >
                      {"Learn More"}
                    </Button>
                  </React.Fragment>
                }
                heroHeading2={
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Claim Your Exclusive Token Airdrop"}
                  </div>
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kDit)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/friends_tech_king/images/homeAirdroppng.png",
                      fullWidth: 576,
                      fullHeight: 1152,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                {"Participate and Be Rewarded for Your Support"}
              </Hero>
            }
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__x1DZd)}
              id={"airdrop"}
            >
              <BenefitSection
                data-plasmic-name={"benefitSection"}
                data-plasmic-override={overrides.benefitSection}
                alternate={true}
                className={classNames("__wab_instance", sty.benefitSection)}
                slot={
                  "Don't miss out on this opportunity\u2014claim your airdrop now."
                }
                slot2={
                  <ConnectButton
                    className={classNames(
                      "__wab_instance",
                      sty.connectButton__rvNQz
                    )}
                  >
                    {"Claim Your Airdrop"}
                  </ConnectButton>
                }
                slot3={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tNci)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__c4Tk)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/friends_tech_king/images/screenshot20230903At214057RemovebgPreviewpng.png",
                        fullWidth: 323,
                        fullHeight: 367,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                }
              >
                {"Claim Your Airdrop"}
              </BenefitSection>
            </div>
          </PageSection>
          <ConnectWallet
            data-plasmic-name={"connectWallet"}
            data-plasmic-override={overrides.connectWallet}
            className={classNames("__wab_instance", sty.connectWallet)}
            connectWallet={(() => {
              try {
                return $state.connectWallet;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageSection",
    "hero",
    "text",
    "button",
    "benefitSection",
    "connectWallet"
  ],
  pageSection: ["pageSection", "hero", "text", "button", "benefitSection"],
  hero: ["hero", "text", "button"],
  text: ["text"],
  button: ["button"],
  benefitSection: ["benefitSection"],
  connectWallet: ["connectWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageSection: typeof PageSection;
  hero: typeof Hero;
  text: "div";
  button: typeof Button;
  benefitSection: typeof BenefitSection;
  connectWallet: typeof ConnectWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAirdrop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAirdrop__VariantsArgs;
    args?: PlasmicAirdrop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAirdrop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAirdrop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAirdrop__ArgProps,
          internalVariantPropNames: PlasmicAirdrop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAirdrop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAirdrop";
  } else {
    func.displayName = `PlasmicAirdrop.${nodeName}`;
  }
  return func;
}

export const PlasmicAirdrop = Object.assign(
  // Top-level PlasmicAirdrop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageSection: makeNodeComponent("pageSection"),
    hero: makeNodeComponent("hero"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    benefitSection: makeNodeComponent("benefitSection"),
    connectWallet: makeNodeComponent("connectWallet"),

    // Metadata about props expected for PlasmicAirdrop
    internalVariantProps: PlasmicAirdrop__VariantProps,
    internalArgProps: PlasmicAirdrop__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAirdrop;
/* prettier-ignore-end */
