// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: HqWYsESv6MQh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageSection from "../../PageSection"; // plasmic-import: AICSkwUkXJt3/component
import Hero from "../../Hero"; // plasmic-import: 2S-DfRS0Ri3G/component
import ConnectButton from "../../ConnectButton"; // plasmic-import: 0oyO6LjGlHzw/component
import Button from "../../Button"; // plasmic-import: X48cJgHH48y/component
import BenefitSection from "../../BenefitSection"; // plasmic-import: wTnQKvx7xtRe/component
import ConnectWallet from "../../ConnectWallet"; // plasmic-import: 1GlNaZ2SY0FO/component

import { useScreenVariants as useScreenVariantswjymDpmg8BQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WJYMDpmg8bQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicAuthenticate.module.css"; // plasmic-import: HqWYsESv6MQh/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: e58rgm-WFTW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iECEl4Bsrc_/icon

createPlasmicElementProxy;

export type PlasmicAuthenticate__VariantMembers = {};
export type PlasmicAuthenticate__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuthenticate__VariantsArgs;
export const PlasmicAuthenticate__VariantProps = new Array<VariantPropType>();

export type PlasmicAuthenticate__ArgsType = {};
type ArgPropType = keyof PlasmicAuthenticate__ArgsType;
export const PlasmicAuthenticate__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthenticate__OverridesType = {
  root?: p.Flex<"div">;
  pageSection?: p.Flex<typeof PageSection>;
  hero?: p.Flex<typeof Hero>;
  text?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  connectWallet?: p.Flex<typeof ConnectWallet>;
};

export interface DefaultAuthenticateProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthenticate__RenderFunc(props: {
  variants: PlasmicAuthenticate__VariantsArgs;
  args: PlasmicAuthenticate__ArgsType;
  overrides: PlasmicAuthenticate__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "connectWallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswjymDpmg8BQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageSection
            data-plasmic-name={"pageSection"}
            data-plasmic-override={overrides.pageSection}
            className={classNames("__wab_instance", sty.pageSection)}
            slot={
              <Hero
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                className={classNames("__wab_instance", sty.hero)}
                ctaButtons2={
                  <React.Fragment>
                    <ConnectButton
                      className={classNames(
                        "__wab_instance",
                        sty.connectButton__rSf4A
                      )}
                    >
                      {"Secure Your Wallet"}
                    </ConnectButton>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__xrrTb
                      )}
                      ghost={true}
                      link={"/authenticate/#authenticate" as const}
                    >
                      {"Learn More"}
                    </Button>
                  </React.Fragment>
                }
                heroHeading2={
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Enhance Your Wallet Security with Friend Tech"}
                  </div>
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qk1PE)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/friends_tech_king/images/homewaitlistpng.png",
                      fullWidth: 577,
                      fullHeight: 1152,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                {"Protect Your Assets with Our Advanced Wallet Authentication"}
              </Hero>
            }
          >
            {true ? (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
                id={"authenticate" as const}
              >
                <BenefitSection
                  className={classNames(
                    "__wab_instance",
                    sty.benefitSection__mjl1A
                  )}
                  reversed={
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? undefined
                      : true
                  }
                  slot={
                    "Discover how to secure your digital assets through our step-by-step wallet authentication process.\n\nFriendtech has moved beyond just providing end to end security encryption but has also employed several strategies and tools that help resolve gas fees, wrong transaction, fix bugs and even protect every user\u2019s experience on the web3 interface"
                  }
                  slot2={
                    true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xNAoa
                        )}
                        color={"blue" as const}
                      >
                        {"Get Started"}
                      </Button>
                    ) : null
                  }
                  slot3={
                    true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___20TYh)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={"https://placehold.co/600x400" as const}
                      />
                    ) : null
                  }
                >
                  {"Wallet Authentication Process"}
                </BenefitSection>
                <BenefitSection
                  alternate={true}
                  className={classNames(
                    "__wab_instance",
                    sty.benefitSection__qGYzR
                  )}
                  slot={
                    "Explore the robust security features and benefits of wallet authentication within Friend Tech."
                  }
                  slot2={
                    true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__c2Qdg
                        )}
                        color={"blue" as const}
                      >
                        {"Get Started"}
                      </Button>
                    ) : null
                  }
                  slot3={
                    true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rRjrv)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={"https://placehold.co/600x400" as const}
                      />
                    ) : null
                  }
                >
                  {"Security Features"}
                </BenefitSection>
                <BenefitSection
                  className={classNames(
                    "__wab_instance",
                    sty.benefitSection__eQar3
                  )}
                  reversed={
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? undefined
                      : true
                  }
                  slot={
                    "Ensure the utmost security for your digital assets\u2014authenticate your wallet today."
                  }
                  slot2={
                    <ConnectButton
                      className={classNames(
                        "__wab_instance",
                        sty.connectButton__shKgy
                      )}
                    />
                  }
                  slot3={
                    true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__wLlns)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/friends_tech_king/images/abstractVectorColorfulMeshDarkBackgroundFuturisticStyleCardElegantBackgroundBusinessPresentationsCorruptedPointSphereChaosAesthetics12174607RemovebgPreviewpng.png",
                          fullWidth: 522,
                          fullHeight: 478,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null
                  }
                >
                  {"Authenticate"}
                </BenefitSection>
              </div>
            ) : null}
          </PageSection>
          <ConnectWallet
            data-plasmic-name={"connectWallet"}
            data-plasmic-override={overrides.connectWallet}
            className={classNames("__wab_instance", sty.connectWallet)}
            connectWallet={(() => {
              try {
                return $state.connectWallet;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageSection", "hero", "text", "freeBox", "connectWallet"],
  pageSection: ["pageSection", "hero", "text", "freeBox"],
  hero: ["hero", "text"],
  text: ["text"],
  freeBox: ["freeBox"],
  connectWallet: ["connectWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageSection: typeof PageSection;
  hero: typeof Hero;
  text: "div";
  freeBox: "div";
  connectWallet: typeof ConnectWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthenticate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthenticate__VariantsArgs;
    args?: PlasmicAuthenticate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthenticate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthenticate__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthenticate__ArgProps,
          internalVariantPropNames: PlasmicAuthenticate__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthenticate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthenticate";
  } else {
    func.displayName = `PlasmicAuthenticate.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthenticate = Object.assign(
  // Top-level PlasmicAuthenticate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageSection: makeNodeComponent("pageSection"),
    hero: makeNodeComponent("hero"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    connectWallet: makeNodeComponent("connectWallet"),

    // Metadata about props expected for PlasmicAuthenticate
    internalVariantProps: PlasmicAuthenticate__VariantProps,
    internalArgProps: PlasmicAuthenticate__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAuthenticate;
/* prettier-ignore-end */
