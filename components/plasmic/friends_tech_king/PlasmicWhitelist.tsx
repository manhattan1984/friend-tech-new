// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: 5t5QAcCT3loC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageSection from "../../PageSection"; // plasmic-import: AICSkwUkXJt3/component
import PageBenefit from "../../PageBenefit"; // plasmic-import: cI-UCGUt-dL5/component
import BenefitSection from "../../BenefitSection"; // plasmic-import: wTnQKvx7xtRe/component
import ConnectButton from "../../ConnectButton"; // plasmic-import: 0oyO6LjGlHzw/component
import Hero from "../../Hero"; // plasmic-import: 2S-DfRS0Ri3G/component
import Button from "../../Button"; // plasmic-import: X48cJgHH48y/component
import ConnectWallet from "../../ConnectWallet"; // plasmic-import: 1GlNaZ2SY0FO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicWhitelist.module.css"; // plasmic-import: 5t5QAcCT3loC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: e58rgm-WFTW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iECEl4Bsrc_/icon

createPlasmicElementProxy;

export type PlasmicWhitelist__VariantMembers = {};
export type PlasmicWhitelist__VariantsArgs = {};
type VariantPropType = keyof PlasmicWhitelist__VariantsArgs;
export const PlasmicWhitelist__VariantProps = new Array<VariantPropType>();

export type PlasmicWhitelist__ArgsType = {};
type ArgPropType = keyof PlasmicWhitelist__ArgsType;
export const PlasmicWhitelist__ArgProps = new Array<ArgPropType>();

export type PlasmicWhitelist__OverridesType = {
  root?: p.Flex<"div">;
  pageSection?: p.Flex<typeof PageSection>;
  pageBenefit?: p.Flex<typeof PageBenefit>;
  h3?: p.Flex<"h3">;
  benefitSection?: p.Flex<typeof BenefitSection>;
  hero?: p.Flex<typeof Hero>;
  button?: p.Flex<typeof Button>;
  connectWallet?: p.Flex<typeof ConnectWallet>;
};

export interface DefaultWhitelistProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWhitelist__RenderFunc(props: {
  variants: PlasmicWhitelist__VariantsArgs;
  args: PlasmicWhitelist__ArgsType;
  overrides: PlasmicWhitelist__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "connectWallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cEer)}>
            <PageSection
              data-plasmic-name={"pageSection"}
              data-plasmic-override={overrides.pageSection}
              className={classNames("__wab_instance", sty.pageSection)}
              slot={
                <Hero
                  data-plasmic-name={"hero"}
                  data-plasmic-override={overrides.hero}
                  className={classNames("__wab_instance", sty.hero)}
                  ctaButtons2={
                    <React.Fragment>
                      <ConnectButton
                        className={classNames(
                          "__wab_instance",
                          sty.connectButton__cJBkc
                        )}
                      >
                        {"Get Whitelisted"}
                      </ConnectButton>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        ghost={true}
                        link={"/whitelist/#about-whitelist"}
                      >
                        {"Learn More"}
                      </Button>
                    </React.Fragment>
                  }
                  heroHeading2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dltgK
                      )}
                    >
                      {
                        "Unlock Premium Benefits as a Friend Tech Whitelist Member"
                      }
                    </div>
                  }
                  slot={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ePmuu)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/friends_tech_king/images/whitelistpng.png",
                        fullWidth: 576,
                        fullHeight: 1152,
                        aspectRatio: undefined
                      }}
                    />
                  }
                >
                  {"Join Our Whitelist for Exclusive Perks and Early Access"}
                </Hero>
              }
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__sTdJ2)}
                id={"about-whitelist"}
              >
                <PageBenefit
                  data-plasmic-name={"pageBenefit"}
                  data-plasmic-override={overrides.pageBenefit}
                  className={classNames("__wab_instance", sty.pageBenefit)}
                  slot={"As a whitelist member, you'll enjoy"}
                  slot2={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fNWv4
                        )}
                      >
                        {"\u2022 Early access to new features and services"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lc1Y7
                        )}
                      >
                        {"\u2022 Priority customer support"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sk5Zn
                        )}
                      >
                        {"\u2022 Exclusive rewards and promotions"}
                      </div>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7OOrQ
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          data-plasmic-name={"h3"}
                          data-plasmic-override={overrides.h3}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3
                          )}
                        >
                          {"Membership Benefits"}
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </PageBenefit>
              </div>
              <BenefitSection
                data-plasmic-name={"benefitSection"}
                data-plasmic-override={overrides.benefitSection}
                alternate={true}
                className={classNames("__wab_instance", sty.benefitSection)}
                slot={
                  "Engage with our active community of tech enthusiasts, share insights, and stay updated on industry trends."
                }
                slot2={
                  <ConnectButton
                    className={classNames(
                      "__wab_instance",
                      sty.connectButton__uhKzR
                    )}
                  >
                    {"Get Whitelisted"}
                  </ConnectButton>
                }
                slot3={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iutA7)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={"https://placehold.co/600x400"}
                  />
                }
              >
                {"Community Engagement"}
              </BenefitSection>
            </PageSection>
          </div>
          <ConnectWallet
            data-plasmic-name={"connectWallet"}
            data-plasmic-override={overrides.connectWallet}
            className={classNames("__wab_instance", sty.connectWallet)}
            connectWallet={(() => {
              try {
                return $state.connectWallet;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageSection",
    "pageBenefit",
    "h3",
    "benefitSection",
    "hero",
    "button",
    "connectWallet"
  ],
  pageSection: [
    "pageSection",
    "pageBenefit",
    "h3",
    "benefitSection",
    "hero",
    "button"
  ],
  pageBenefit: ["pageBenefit", "h3"],
  h3: ["h3"],
  benefitSection: ["benefitSection"],
  hero: ["hero", "button"],
  button: ["button"],
  connectWallet: ["connectWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageSection: typeof PageSection;
  pageBenefit: typeof PageBenefit;
  h3: "h3";
  benefitSection: typeof BenefitSection;
  hero: typeof Hero;
  button: typeof Button;
  connectWallet: typeof ConnectWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhitelist__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWhitelist__VariantsArgs;
    args?: PlasmicWhitelist__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWhitelist__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWhitelist__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWhitelist__ArgProps,
          internalVariantPropNames: PlasmicWhitelist__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWhitelist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWhitelist";
  } else {
    func.displayName = `PlasmicWhitelist.${nodeName}`;
  }
  return func;
}

export const PlasmicWhitelist = Object.assign(
  // Top-level PlasmicWhitelist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageSection: makeNodeComponent("pageSection"),
    pageBenefit: makeNodeComponent("pageBenefit"),
    h3: makeNodeComponent("h3"),
    benefitSection: makeNodeComponent("benefitSection"),
    hero: makeNodeComponent("hero"),
    button: makeNodeComponent("button"),
    connectWallet: makeNodeComponent("connectWallet"),

    // Metadata about props expected for PlasmicWhitelist
    internalVariantProps: PlasmicWhitelist__VariantProps,
    internalArgProps: PlasmicWhitelist__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWhitelist;
/* prettier-ignore-end */
