// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sFqKXDN8rHnCDU91Y9JUYu
// Component: 1GlNaZ2SY0FO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import Wallet from "../../Wallet"; // plasmic-import: tS4Sphrlh0qf/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_friends_tech_king.module.css"; // plasmic-import: sFqKXDN8rHnCDU91Y9JUYu/projectcss
import sty from "./PlasmicConnectWallet.module.css"; // plasmic-import: 1GlNaZ2SY0FO/css

createPlasmicElementProxy;

export type PlasmicConnectWallet__VariantMembers = {};
export type PlasmicConnectWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicConnectWallet__VariantsArgs;
export const PlasmicConnectWallet__VariantProps = new Array<VariantPropType>();

export type PlasmicConnectWallet__ArgsType = {
  connectWallet?: boolean;
};
type ArgPropType = keyof PlasmicConnectWallet__ArgsType;
export const PlasmicConnectWallet__ArgProps = new Array<ArgPropType>(
  "connectWallet"
);

export type PlasmicConnectWallet__OverridesType = {
  root?: p.Flex<"div">;
  modal?: p.Flex<typeof AntdModal>;
  h4?: p.Flex<"h4">;
};

export interface DefaultConnectWalletProps {
  connectWallet?: boolean;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConnectWallet__RenderFunc(props: {
  variants: PlasmicConnectWallet__VariantsArgs;
  args: PlasmicConnectWallet__ArgsType;
  overrides: PlasmicConnectWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          connectWallet: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.connectWallet;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4
            )}
          >
            {"Connect your wallet"}
          </h4>
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__db9Qw)}>
          <div className={classNames(projectcss.all, sty.freeBox__uQfUc)}>
            <Wallet
              className={classNames("__wab_instance", sty.wallet__sYDfB)}
            />

            <Wallet
              className={classNames("__wab_instance", sty.wallet__glsXr)}
              slot={"Coinbase"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___42JuL)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={"https://choronholdings.org/images/coinbase.svg"}
              />
            </Wallet>
            <Wallet
              className={classNames("__wab_instance", sty.wallet__x8UbY)}
              slot={"Trust Wallet"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__bqnVt)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={"https://choronholdings.org/images/trust-wallet.svg"}
              />
            </Wallet>
            <Wallet
              className={classNames("__wab_instance", sty.wallet__tiKs3)}
              slot={"Binance Wallet"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__gpNoc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={"https://choronholdings.org/images/binance.svg"}
              />
            </Wallet>
            <Wallet
              className={classNames("__wab_instance", sty.wallet__niHk7)}
              slot={"WalletConnect"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pba8S)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={"https://choronholdings.org/images/wallet-connect.svg"}
              />
            </Wallet>
          </div>
        </div>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "h4"],
  modal: ["modal", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnectWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnectWallet__VariantsArgs;
    args?: PlasmicConnectWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConnectWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConnectWallet__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicConnectWallet__ArgProps,
          internalVariantPropNames: PlasmicConnectWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConnectWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectWallet";
  } else {
    func.displayName = `PlasmicConnectWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectWallet = Object.assign(
  // Top-level PlasmicConnectWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicConnectWallet
    internalVariantProps: PlasmicConnectWallet__VariantProps,
    internalArgProps: PlasmicConnectWallet__ArgProps
  }
);

export default PlasmicConnectWallet;
/* prettier-ignore-end */
